
PLANB_FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000566  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800062  00800062  000005fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000748  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b5  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035d  00000000  00000000  00001055  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e1  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000496  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00002073  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 14 01 	call	0x228	; 0x228 <main>
  8a:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  92:	61 15       	cp	r22, r1
  94:	71 05       	cpc	r23, r1
  96:	81 05       	cpc	r24, r1
  98:	91 05       	cpc	r25, r1
  9a:	51 f0       	breq	.+20     	; 0xb0 <_Z12delay_reducel+0x1e>
	{
		delay--;
  9c:	61 50       	subi	r22, 0x01	; 1
  9e:	71 09       	sbc	r23, r1
  a0:	81 09       	sbc	r24, r1
  a2:	91 09       	sbc	r25, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	61 15       	cp	r22, r1
  a8:	71 05       	cpc	r23, r1
  aa:	81 05       	cpc	r24, r1
  ac:	91 05       	cpc	r25, r1
  ae:	b1 f7       	brne	.-20     	; 0x9c <_Z12delay_reducel+0xa>
  b0:	08 95       	ret

000000b2 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	41 f4       	brne	.+16     	; 0xc6 <_Z12delay_secondi+0x14>
  b6:	08 95       	ret
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
	{
		for(j=65535;j!=0;j--);
  bc:	e9 f7       	brne	.-6      	; 0xb8 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  be:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	19 f4       	brne	.+6      	; 0xca <_Z12delay_secondi+0x18>
  c4:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	25 2f       	mov	r18, r21
  cc:	34 2f       	mov	r19, r20
  ce:	f4 cf       	rjmp	.-24     	; 0xb8 <_Z12delay_secondi+0x6>

000000d0 <_Z8LED_INITv>:

//************初始化
void LED_INIT()
{
	
	LED_PORT = 0X00;
  d0:	1b ba       	out	0x1b, r1	; 27
	
	LED_DDR = 0XFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret

000000d8 <_Z19M16_USART_SEND_INITv>:
//////////////////////////////////////////////////
////M16 USART
//////////////////////////////////////////////////
void M16_USART_SEND_INIT()
{
	UBRRL = 95;//********7.3728M 9600 BAUD U2X
  d8:	8f e5       	ldi	r24, 0x5F	; 95
  da:	89 b9       	out	0x09, r24	; 9
	
	UCSRA |= (1 << U2X);//*********倍速模式
  dc:	59 9a       	sbi	0x0b, 1	; 11
	
	UCSRB |= (1 << TXEN);//********(1 << TXCIE)|(1 << UDRIE)|发送中断 寄存器空中断 发送使能
  de:	53 9a       	sbi	0x0a, 3	; 10
	
	UCSRC |= (1 << URSEL)|(1 << UCSZ1)|(1 << UCSZ0);//*********异步操作 无校验 一位停止位 8位数据 
  e0:	80 b5       	in	r24, 0x20	; 32
  e2:	86 68       	ori	r24, 0x86	; 134
  e4:	80 bd       	out	0x20, r24	; 32
  e6:	08 95       	ret

000000e8 <_Z20M16_USART_SEND_ALONEc>:
}

void M16_USART_SEND_ALONE(char data)
{
	/* 等待发送缓冲器为空 */
	while ( !( UCSRA & (1<<UDRE)) )
  e8:	5d 9b       	sbis	0x0b, 5	; 11
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <_Z20M16_USART_SEND_ALONEc>
	;
	/* 将数据放入缓冲器，发送数据*/
	UDR = data;
  ec:	8c b9       	out	0x0c, r24	; 12
  ee:	08 95       	ret

000000f0 <_Z20IR_receiver_model_upv>:
	}
}
//设置为上升沿捕获
void IR_receiver_model_up()
{
	TCCR1B |= (1<<ICES1);
  f0:	8e b5       	in	r24, 0x2e	; 46
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	8e bd       	out	0x2e, r24	; 46
	TIFR |= (1<<ICF1);
  f6:	88 b7       	in	r24, 0x38	; 56
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	88 bf       	out	0x38, r24	; 56
  fc:	08 95       	ret

000000fe <_Z22IR_receiver_model_downv>:
}
//设置为下降沿捕获
void IR_receiver_model_down()
{
	TCCR1B &= ~(1<<ICES1);
  fe:	8e b5       	in	r24, 0x2e	; 46
 100:	8f 7b       	andi	r24, 0xBF	; 191
 102:	8e bd       	out	0x2e, r24	; 46
	TIFR |= (1<<ICF1);
 104:	88 b7       	in	r24, 0x38	; 56
 106:	80 62       	ori	r24, 0x20	; 32
 108:	88 bf       	out	0x38, r24	; 56
 10a:	08 95       	ret

0000010c <_Z16IR_receiver_inith>:
 *使用timer1的icr1捕获
 */

void IR_receiver_init(uchar edge)//edge = 1 means up model and = 0 means down edge model
{
	IR_receiver_DDR &= ~(1<<IR_receiver_OUT);  IR_sender_PORT |= (1 << IR_sender_OUT);//相应端口设为接收并且置为高电平
 10c:	8e 98       	cbi	0x11, 6	; 17
 10e:	c3 9a       	sbi	0x18, 3	; 24
	TIMSK |= (1<<TICIE1);//中断初始化
 110:	99 b7       	in	r25, 0x39	; 57
 112:	90 62       	ori	r25, 0x20	; 32
 114:	99 bf       	out	0x39, r25	; 57
	TCCR1B |= (1<<ICNC1)|(1<<CS12);FN_IR = 256;//噪声抑制 下降沿触发 256分频
 116:	9e b5       	in	r25, 0x2e	; 46
 118:	94 68       	ori	r25, 0x84	; 132
 11a:	9e bd       	out	0x2e, r25	; 46
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	31 e0       	ldi	r19, 0x01	; 1
 120:	30 93 61 00 	sts	0x0061, r19
 124:	20 93 60 00 	sts	0x0060, r18
	TCNT1 = 0x00;//计数器初始化
 128:	1d bc       	out	0x2d, r1	; 45
 12a:	1c bc       	out	0x2c, r1	; 44
	if (edge == 0)
 12c:	81 11       	cpse	r24, r1
 12e:	03 c0       	rjmp	.+6      	; 0x136 <_Z16IR_receiver_inith+0x2a>
	{
		IR_receiver_model_down();
 130:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z22IR_receiver_model_downv>
 134:	08 95       	ret
	}
	else
	{
		IR_receiver_model_up();
 136:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z20IR_receiver_model_upv>
 13a:	08 95       	ret

0000013c <_Z24IR_receiver_model_changeh>:
}

uchar IR_receiver_model_change(uchar model)//model == 1 is model up and == 0 is model down
//to use this function it's better to take model = IR_receiver_model_change(model);so that model can get the return value
{
	if (model == 0)
 13c:	81 11       	cpse	r24, r1
 13e:	04 c0       	rjmp	.+8      	; 0x148 <_Z24IR_receiver_model_changeh+0xc>
	{
		
		
		IR_receiver_model_up();
 140:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z20IR_receiver_model_upv>
		
		return 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret
	}
	else
	{
		
		IR_receiver_model_down();
 148:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z22IR_receiver_model_downv>
		
		return 0;
 14c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
 14e:	08 95       	ret

00000150 <_Z20BASIC_HexToDciAsWordc>:
char BASIC_ten;
char BASIC_poi;

void BASIC_HexToDciAsWord(char num)//here use char
{
	BASIC_hun = num/100;
 150:	99 e2       	ldi	r25, 0x29	; 41
 152:	89 9f       	mul	r24, r25
 154:	91 2d       	mov	r25, r1
 156:	11 24       	eor	r1, r1
 158:	92 95       	swap	r25
 15a:	9f 70       	andi	r25, 0x0F	; 15
	BASIC_hun = BASIC_hun + '0';
 15c:	20 e3       	ldi	r18, 0x30	; 48
 15e:	29 0f       	add	r18, r25
 160:	20 93 8d 00 	sts	0x008D, r18
	BASIC_ten = num%100/10;
 164:	28 2f       	mov	r18, r24
 166:	34 e6       	ldi	r19, 0x64	; 100
 168:	93 9f       	mul	r25, r19
 16a:	20 19       	sub	r18, r0
 16c:	11 24       	eor	r1, r1
 16e:	9d ec       	ldi	r25, 0xCD	; 205
 170:	29 9f       	mul	r18, r25
 172:	21 2d       	mov	r18, r1
 174:	11 24       	eor	r1, r1
 176:	26 95       	lsr	r18
 178:	26 95       	lsr	r18
 17a:	26 95       	lsr	r18
	BASIC_ten = BASIC_ten + '0';
 17c:	20 5d       	subi	r18, 0xD0	; 208
 17e:	20 93 8c 00 	sts	0x008C, r18
	BASIC_poi = num%10;
 182:	89 9f       	mul	r24, r25
 184:	91 2d       	mov	r25, r1
 186:	11 24       	eor	r1, r1
 188:	96 95       	lsr	r25
 18a:	96 95       	lsr	r25
 18c:	96 95       	lsr	r25
 18e:	99 0f       	add	r25, r25
 190:	29 2f       	mov	r18, r25
 192:	22 0f       	add	r18, r18
 194:	22 0f       	add	r18, r18
 196:	92 0f       	add	r25, r18
 198:	89 1b       	sub	r24, r25
	BASIC_poi = BASIC_poi + '0';
 19a:	80 5d       	subi	r24, 0xD0	; 208
 19c:	80 93 8b 00 	sts	0x008B, r24
 1a0:	08 95       	ret

000001a2 <_Z17IR_receiver_catchv>:
uchar count = 0;


void IR_receiver_catch()
{
	new_num = ICR1;
 1a2:	86 b5       	in	r24, 0x26	; 38
 1a4:	97 b5       	in	r25, 0x27	; 39
 1a6:	90 93 84 00 	sts	0x0084, r25
 1aa:	80 93 83 00 	sts	0x0083, r24
	change_num = new_num - old_num;
 1ae:	20 91 85 00 	lds	r18, 0x0085
 1b2:	30 91 86 00 	lds	r19, 0x0086
 1b6:	ac 01       	movw	r20, r24
 1b8:	42 1b       	sub	r20, r18
 1ba:	53 0b       	sbc	r21, r19
 1bc:	50 93 82 00 	sts	0x0082, r21
 1c0:	40 93 81 00 	sts	0x0081, r20
	old_num = new_num;
 1c4:	90 93 86 00 	sts	0x0086, r25
 1c8:	80 93 85 00 	sts	0x0085, r24
 1cc:	08 95       	ret

000001ce <__vector_5>:
}

ISR(TIMER1_CAPT_vect)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	IR_receiver_catch();
 1f0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z17IR_receiver_catchv>
	
	model = IR_receiver_model_change(model);
 1f4:	80 91 8a 00 	lds	r24, 0x008A
 1f8:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z24IR_receiver_model_changeh>
 1fc:	80 93 8a 00 	sts	0x008A, r24
	figure = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 89 00 	sts	0x0089, r24
}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <main>:

 

int main(void)
{
    LED_INIT();
 228:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z8LED_INITv>
    
    LED_PORT = 0x00;
 22c:	1b ba       	out	0x1b, r1	; 27
    
    M16_USART_SEND_INIT();
 22e:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z19M16_USART_SEND_INITv>
    
   IR_receiver_init(0);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 86 00 	call	0x10c	; 0x10c <_Z16IR_receiver_inith>
    
    sei(); 
 238:	78 94       	sei
		     count ++;
		     
	     }
	     if (lister >= 12)
	     {
			 buffer[count] = '\0';
 23a:	03 e6       	ldi	r16, 0x63	; 99
 23c:	10 e0       	ldi	r17, 0x00	; 0
 23e:	0f 2e       	mov	r0, r31
 240:	f4 e6       	ldi	r31, 0x64	; 100
 242:	ef 2e       	mov	r14, r31
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	ff 2e       	mov	r15, r31
 248:	f0 2d       	mov	r31, r0
    sei(); 
    
    while(1)
    {
		
	     if (figure == 0)
 24a:	80 91 89 00 	lds	r24, 0x0089
 24e:	81 11       	cpse	r24, r1
 250:	07 c0       	rjmp	.+14     	; 0x260 <main+0x38>
	     { 
		     delay_reduce(1);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 25e:	23 c0       	rjmp	.+70     	; 0x2a6 <main+0x7e>
	     }
	     else
	     {
		     
		     figure = 0;
 260:	10 92 89 00 	sts	0x0089, r1
		     lister++;
 264:	80 91 87 00 	lds	r24, 0x0087
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 87 00 	sts	0x0087, r24
		     time = change_num/28.8;
 26e:	60 91 81 00 	lds	r22, 0x0081
 272:	70 91 82 00 	lds	r23, 0x0082
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 23 02 	call	0x446	; 0x446 <__floatunsisf>
 27e:	26 e6       	ldi	r18, 0x66	; 102
 280:	36 e6       	ldi	r19, 0x66	; 102
 282:	46 ee       	ldi	r20, 0xE6	; 230
 284:	51 e4       	ldi	r21, 0x41	; 65
 286:	0e 94 82 01 	call	0x304	; 0x304 <__divsf3>
 28a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__fixunssfsi>
 28e:	60 93 88 00 	sts	0x0088, r22
		     buffer[count] = time;
 292:	80 91 62 00 	lds	r24, 0x0062
 296:	e8 2f       	mov	r30, r24
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ed 59       	subi	r30, 0x9D	; 157
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	60 83       	st	Z, r22
		     count ++;
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 62 00 	sts	0x0062, r24
		     
	     }
	     if (lister >= 12)
 2a6:	80 91 87 00 	lds	r24, 0x0087
 2aa:	8c 30       	cpi	r24, 0x0C	; 12
 2ac:	70 f2       	brcs	.-100    	; 0x24a <main+0x22>
	     {
			 buffer[count] = '\0';
 2ae:	e0 91 62 00 	lds	r30, 0x0062
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ed 59       	subi	r30, 0x9D	; 157
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	10 82       	st	Z, r1
		     for (int i = 1;buffer[i] != '\0';i++ )
 2ba:	f8 01       	movw	r30, r16
 2bc:	81 81       	ldd	r24, Z+1	; 0x01
 2be:	88 23       	and	r24, r24
 2c0:	21 f2       	breq	.-120    	; 0x24a <main+0x22>
 2c2:	e7 01       	movw	r28, r14
		     {
				 delay_second(25);
 2c4:	89 e1       	ldi	r24, 0x19	; 25
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12delay_secondi>
 2cc:	fe 01       	movw	r30, r28
				 LED_PORT = buffer[i];
 2ce:	89 91       	ld	r24, Y+
 2d0:	8b bb       	out	0x1b, r24	; 27
				 BASIC_HexToDciAsWord(buffer[i]);
 2d2:	80 81       	ld	r24, Z
 2d4:	0e 94 a8 00 	call	0x150	; 0x150 <_Z20BASIC_HexToDciAsWordc>
				 M16_USART_SEND_ALONE(BASIC_hun);
 2d8:	80 91 8d 00 	lds	r24, 0x008D
 2dc:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z20M16_USART_SEND_ALONEc>
				 M16_USART_SEND_ALONE(BASIC_ten);
 2e0:	80 91 8c 00 	lds	r24, 0x008C
 2e4:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z20M16_USART_SEND_ALONEc>
				 M16_USART_SEND_ALONE(BASIC_poi);
 2e8:	80 91 8b 00 	lds	r24, 0x008B
 2ec:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z20M16_USART_SEND_ALONEc>
				 M16_USART_SEND_ALONE('\r');
 2f0:	8d e0       	ldi	r24, 0x0D	; 13
 2f2:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z20M16_USART_SEND_ALONEc>
				 M16_USART_SEND_ALONE('\n');
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z20M16_USART_SEND_ALONEc>
		     
	     }
	     if (lister >= 12)
	     {
			 buffer[count] = '\0';
		     for (int i = 1;buffer[i] != '\0';i++ )
 2fc:	88 81       	ld	r24, Y
 2fe:	81 11       	cpse	r24, r1
 300:	e1 cf       	rjmp	.-62     	; 0x2c4 <main+0x9c>
 302:	a3 cf       	rjmp	.-186    	; 0x24a <main+0x22>

00000304 <__divsf3>:
 304:	0e 94 96 01 	call	0x32c	; 0x32c <__divsf3x>
 308:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_round>
 30c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_pscB>
 310:	58 f0       	brcs	.+22     	; 0x328 <__divsf3+0x24>
 312:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fp_pscA>
 316:	40 f0       	brcs	.+16     	; 0x328 <__divsf3+0x24>
 318:	29 f4       	brne	.+10     	; 0x324 <__divsf3+0x20>
 31a:	5f 3f       	cpi	r21, 0xFF	; 255
 31c:	29 f0       	breq	.+10     	; 0x328 <__divsf3+0x24>
 31e:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_inf>
 322:	51 11       	cpse	r21, r1
 324:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_szero>
 328:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_nan>

0000032c <__divsf3x>:
 32c:	0e 94 88 02 	call	0x510	; 0x510 <__fp_split3>
 330:	68 f3       	brcs	.-38     	; 0x30c <__divsf3+0x8>

00000332 <__divsf3_pse>:
 332:	99 23       	and	r25, r25
 334:	b1 f3       	breq	.-20     	; 0x322 <__divsf3+0x1e>
 336:	55 23       	and	r21, r21
 338:	91 f3       	breq	.-28     	; 0x31e <__divsf3+0x1a>
 33a:	95 1b       	sub	r25, r21
 33c:	55 0b       	sbc	r21, r21
 33e:	bb 27       	eor	r27, r27
 340:	aa 27       	eor	r26, r26
 342:	62 17       	cp	r22, r18
 344:	73 07       	cpc	r23, r19
 346:	84 07       	cpc	r24, r20
 348:	38 f0       	brcs	.+14     	; 0x358 <__divsf3_pse+0x26>
 34a:	9f 5f       	subi	r25, 0xFF	; 255
 34c:	5f 4f       	sbci	r21, 0xFF	; 255
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	44 1f       	adc	r20, r20
 354:	aa 1f       	adc	r26, r26
 356:	a9 f3       	breq	.-22     	; 0x342 <__divsf3_pse+0x10>
 358:	35 d0       	rcall	.+106    	; 0x3c4 <__divsf3_pse+0x92>
 35a:	0e 2e       	mov	r0, r30
 35c:	3a f0       	brmi	.+14     	; 0x36c <__divsf3_pse+0x3a>
 35e:	e0 e8       	ldi	r30, 0x80	; 128
 360:	32 d0       	rcall	.+100    	; 0x3c6 <__divsf3_pse+0x94>
 362:	91 50       	subi	r25, 0x01	; 1
 364:	50 40       	sbci	r21, 0x00	; 0
 366:	e6 95       	lsr	r30
 368:	00 1c       	adc	r0, r0
 36a:	ca f7       	brpl	.-14     	; 0x35e <__divsf3_pse+0x2c>
 36c:	2b d0       	rcall	.+86     	; 0x3c4 <__divsf3_pse+0x92>
 36e:	fe 2f       	mov	r31, r30
 370:	29 d0       	rcall	.+82     	; 0x3c4 <__divsf3_pse+0x92>
 372:	66 0f       	add	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	88 1f       	adc	r24, r24
 378:	bb 1f       	adc	r27, r27
 37a:	26 17       	cp	r18, r22
 37c:	37 07       	cpc	r19, r23
 37e:	48 07       	cpc	r20, r24
 380:	ab 07       	cpc	r26, r27
 382:	b0 e8       	ldi	r27, 0x80	; 128
 384:	09 f0       	breq	.+2      	; 0x388 <__divsf3_pse+0x56>
 386:	bb 0b       	sbc	r27, r27
 388:	80 2d       	mov	r24, r0
 38a:	bf 01       	movw	r22, r30
 38c:	ff 27       	eor	r31, r31
 38e:	93 58       	subi	r25, 0x83	; 131
 390:	5f 4f       	sbci	r21, 0xFF	; 255
 392:	3a f0       	brmi	.+14     	; 0x3a2 <__divsf3_pse+0x70>
 394:	9e 3f       	cpi	r25, 0xFE	; 254
 396:	51 05       	cpc	r21, r1
 398:	78 f0       	brcs	.+30     	; 0x3b8 <__divsf3_pse+0x86>
 39a:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_inf>
 39e:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_szero>
 3a2:	5f 3f       	cpi	r21, 0xFF	; 255
 3a4:	e4 f3       	brlt	.-8      	; 0x39e <__divsf3_pse+0x6c>
 3a6:	98 3e       	cpi	r25, 0xE8	; 232
 3a8:	d4 f3       	brlt	.-12     	; 0x39e <__divsf3_pse+0x6c>
 3aa:	86 95       	lsr	r24
 3ac:	77 95       	ror	r23
 3ae:	67 95       	ror	r22
 3b0:	b7 95       	ror	r27
 3b2:	f7 95       	ror	r31
 3b4:	9f 5f       	subi	r25, 0xFF	; 255
 3b6:	c9 f7       	brne	.-14     	; 0x3aa <__divsf3_pse+0x78>
 3b8:	88 0f       	add	r24, r24
 3ba:	91 1d       	adc	r25, r1
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	97 f9       	bld	r25, 7
 3c2:	08 95       	ret
 3c4:	e1 e0       	ldi	r30, 0x01	; 1
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	88 1f       	adc	r24, r24
 3cc:	bb 1f       	adc	r27, r27
 3ce:	62 17       	cp	r22, r18
 3d0:	73 07       	cpc	r23, r19
 3d2:	84 07       	cpc	r24, r20
 3d4:	ba 07       	cpc	r27, r26
 3d6:	20 f0       	brcs	.+8      	; 0x3e0 <__divsf3_pse+0xae>
 3d8:	62 1b       	sub	r22, r18
 3da:	73 0b       	sbc	r23, r19
 3dc:	84 0b       	sbc	r24, r20
 3de:	ba 0b       	sbc	r27, r26
 3e0:	ee 1f       	adc	r30, r30
 3e2:	88 f7       	brcc	.-30     	; 0x3c6 <__divsf3_pse+0x94>
 3e4:	e0 95       	com	r30
 3e6:	08 95       	ret

000003e8 <__fixunssfsi>:
 3e8:	0e 94 90 02 	call	0x520	; 0x520 <__fp_splitA>
 3ec:	88 f0       	brcs	.+34     	; 0x410 <__fixunssfsi+0x28>
 3ee:	9f 57       	subi	r25, 0x7F	; 127
 3f0:	98 f0       	brcs	.+38     	; 0x418 <__fixunssfsi+0x30>
 3f2:	b9 2f       	mov	r27, r25
 3f4:	99 27       	eor	r25, r25
 3f6:	b7 51       	subi	r27, 0x17	; 23
 3f8:	b0 f0       	brcs	.+44     	; 0x426 <__fixunssfsi+0x3e>
 3fa:	e1 f0       	breq	.+56     	; 0x434 <__fixunssfsi+0x4c>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	1a f0       	brmi	.+6      	; 0x40c <__fixunssfsi+0x24>
 406:	ba 95       	dec	r27
 408:	c9 f7       	brne	.-14     	; 0x3fc <__fixunssfsi+0x14>
 40a:	14 c0       	rjmp	.+40     	; 0x434 <__fixunssfsi+0x4c>
 40c:	b1 30       	cpi	r27, 0x01	; 1
 40e:	91 f0       	breq	.+36     	; 0x434 <__fixunssfsi+0x4c>
 410:	0e 94 aa 02 	call	0x554	; 0x554 <__fp_zero>
 414:	b1 e0       	ldi	r27, 0x01	; 1
 416:	08 95       	ret
 418:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_zero>
 41c:	67 2f       	mov	r22, r23
 41e:	78 2f       	mov	r23, r24
 420:	88 27       	eor	r24, r24
 422:	b8 5f       	subi	r27, 0xF8	; 248
 424:	39 f0       	breq	.+14     	; 0x434 <__fixunssfsi+0x4c>
 426:	b9 3f       	cpi	r27, 0xF9	; 249
 428:	cc f3       	brlt	.-14     	; 0x41c <__fixunssfsi+0x34>
 42a:	86 95       	lsr	r24
 42c:	77 95       	ror	r23
 42e:	67 95       	ror	r22
 430:	b3 95       	inc	r27
 432:	d9 f7       	brne	.-10     	; 0x42a <__fixunssfsi+0x42>
 434:	3e f4       	brtc	.+14     	; 0x444 <__fixunssfsi+0x5c>
 436:	90 95       	com	r25
 438:	80 95       	com	r24
 43a:	70 95       	com	r23
 43c:	61 95       	neg	r22
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	08 95       	ret

00000446 <__floatunsisf>:
 446:	e8 94       	clt
 448:	09 c0       	rjmp	.+18     	; 0x45c <__floatsisf+0x12>

0000044a <__floatsisf>:
 44a:	97 fb       	bst	r25, 7
 44c:	3e f4       	brtc	.+14     	; 0x45c <__floatsisf+0x12>
 44e:	90 95       	com	r25
 450:	80 95       	com	r24
 452:	70 95       	com	r23
 454:	61 95       	neg	r22
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	99 23       	and	r25, r25
 45e:	a9 f0       	breq	.+42     	; 0x48a <__stack+0x2b>
 460:	f9 2f       	mov	r31, r25
 462:	96 e9       	ldi	r25, 0x96	; 150
 464:	bb 27       	eor	r27, r27
 466:	93 95       	inc	r25
 468:	f6 95       	lsr	r31
 46a:	87 95       	ror	r24
 46c:	77 95       	ror	r23
 46e:	67 95       	ror	r22
 470:	b7 95       	ror	r27
 472:	f1 11       	cpse	r31, r1
 474:	f8 cf       	rjmp	.-16     	; 0x466 <__stack+0x7>
 476:	fa f4       	brpl	.+62     	; 0x4b6 <__stack+0x57>
 478:	bb 0f       	add	r27, r27
 47a:	11 f4       	brne	.+4      	; 0x480 <__stack+0x21>
 47c:	60 ff       	sbrs	r22, 0
 47e:	1b c0       	rjmp	.+54     	; 0x4b6 <__stack+0x57>
 480:	6f 5f       	subi	r22, 0xFF	; 255
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	8f 4f       	sbci	r24, 0xFF	; 255
 486:	9f 4f       	sbci	r25, 0xFF	; 255
 488:	16 c0       	rjmp	.+44     	; 0x4b6 <__stack+0x57>
 48a:	88 23       	and	r24, r24
 48c:	11 f0       	breq	.+4      	; 0x492 <__stack+0x33>
 48e:	96 e9       	ldi	r25, 0x96	; 150
 490:	11 c0       	rjmp	.+34     	; 0x4b4 <__stack+0x55>
 492:	77 23       	and	r23, r23
 494:	21 f0       	breq	.+8      	; 0x49e <__stack+0x3f>
 496:	9e e8       	ldi	r25, 0x8E	; 142
 498:	87 2f       	mov	r24, r23
 49a:	76 2f       	mov	r23, r22
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <__stack+0x49>
 49e:	66 23       	and	r22, r22
 4a0:	71 f0       	breq	.+28     	; 0x4be <__stack+0x5f>
 4a2:	96 e8       	ldi	r25, 0x86	; 134
 4a4:	86 2f       	mov	r24, r22
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	2a f0       	brmi	.+10     	; 0x4b6 <__stack+0x57>
 4ac:	9a 95       	dec	r25
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	88 1f       	adc	r24, r24
 4b4:	da f7       	brpl	.-10     	; 0x4ac <__stack+0x4d>
 4b6:	88 0f       	add	r24, r24
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	97 f9       	bld	r25, 7
 4be:	08 95       	ret

000004c0 <__fp_inf>:
 4c0:	97 f9       	bld	r25, 7
 4c2:	9f 67       	ori	r25, 0x7F	; 127
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	08 95       	ret

000004cc <__fp_nan>:
 4cc:	9f ef       	ldi	r25, 0xFF	; 255
 4ce:	80 ec       	ldi	r24, 0xC0	; 192
 4d0:	08 95       	ret

000004d2 <__fp_pscA>:
 4d2:	00 24       	eor	r0, r0
 4d4:	0a 94       	dec	r0
 4d6:	16 16       	cp	r1, r22
 4d8:	17 06       	cpc	r1, r23
 4da:	18 06       	cpc	r1, r24
 4dc:	09 06       	cpc	r0, r25
 4de:	08 95       	ret

000004e0 <__fp_pscB>:
 4e0:	00 24       	eor	r0, r0
 4e2:	0a 94       	dec	r0
 4e4:	12 16       	cp	r1, r18
 4e6:	13 06       	cpc	r1, r19
 4e8:	14 06       	cpc	r1, r20
 4ea:	05 06       	cpc	r0, r21
 4ec:	08 95       	ret

000004ee <__fp_round>:
 4ee:	09 2e       	mov	r0, r25
 4f0:	03 94       	inc	r0
 4f2:	00 0c       	add	r0, r0
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__fp_round+0xc>
 4f6:	88 23       	and	r24, r24
 4f8:	52 f0       	brmi	.+20     	; 0x50e <__fp_round+0x20>
 4fa:	bb 0f       	add	r27, r27
 4fc:	40 f4       	brcc	.+16     	; 0x50e <__fp_round+0x20>
 4fe:	bf 2b       	or	r27, r31
 500:	11 f4       	brne	.+4      	; 0x506 <__fp_round+0x18>
 502:	60 ff       	sbrs	r22, 0
 504:	04 c0       	rjmp	.+8      	; 0x50e <__fp_round+0x20>
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	8f 4f       	sbci	r24, 0xFF	; 255
 50c:	9f 4f       	sbci	r25, 0xFF	; 255
 50e:	08 95       	ret

00000510 <__fp_split3>:
 510:	57 fd       	sbrc	r21, 7
 512:	90 58       	subi	r25, 0x80	; 128
 514:	44 0f       	add	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	59 f0       	breq	.+22     	; 0x530 <__fp_splitA+0x10>
 51a:	5f 3f       	cpi	r21, 0xFF	; 255
 51c:	71 f0       	breq	.+28     	; 0x53a <__fp_splitA+0x1a>
 51e:	47 95       	ror	r20

00000520 <__fp_splitA>:
 520:	88 0f       	add	r24, r24
 522:	97 fb       	bst	r25, 7
 524:	99 1f       	adc	r25, r25
 526:	61 f0       	breq	.+24     	; 0x540 <__fp_splitA+0x20>
 528:	9f 3f       	cpi	r25, 0xFF	; 255
 52a:	79 f0       	breq	.+30     	; 0x54a <__fp_splitA+0x2a>
 52c:	87 95       	ror	r24
 52e:	08 95       	ret
 530:	12 16       	cp	r1, r18
 532:	13 06       	cpc	r1, r19
 534:	14 06       	cpc	r1, r20
 536:	55 1f       	adc	r21, r21
 538:	f2 cf       	rjmp	.-28     	; 0x51e <__fp_split3+0xe>
 53a:	46 95       	lsr	r20
 53c:	f1 df       	rcall	.-30     	; 0x520 <__fp_splitA>
 53e:	08 c0       	rjmp	.+16     	; 0x550 <__fp_splitA+0x30>
 540:	16 16       	cp	r1, r22
 542:	17 06       	cpc	r1, r23
 544:	18 06       	cpc	r1, r24
 546:	99 1f       	adc	r25, r25
 548:	f1 cf       	rjmp	.-30     	; 0x52c <__fp_splitA+0xc>
 54a:	86 95       	lsr	r24
 54c:	71 05       	cpc	r23, r1
 54e:	61 05       	cpc	r22, r1
 550:	08 94       	sec
 552:	08 95       	ret

00000554 <__fp_zero>:
 554:	e8 94       	clt

00000556 <__fp_szero>:
 556:	bb 27       	eor	r27, r27
 558:	66 27       	eor	r22, r22
 55a:	77 27       	eor	r23, r23
 55c:	cb 01       	movw	r24, r22
 55e:	97 f9       	bld	r25, 7
 560:	08 95       	ret

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
