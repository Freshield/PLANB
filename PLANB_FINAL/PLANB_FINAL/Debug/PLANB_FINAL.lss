
PLANB_FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004f8  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800062  00800062  0000058e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000723  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b5  00000000  00000000  00000e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000315  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000414  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  8a:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  92:	61 15       	cp	r22, r1
  94:	71 05       	cpc	r23, r1
  96:	81 05       	cpc	r24, r1
  98:	91 05       	cpc	r25, r1
  9a:	51 f0       	breq	.+20     	; 0xb0 <_Z12delay_reducel+0x1e>
	{
		delay--;
  9c:	61 50       	subi	r22, 0x01	; 1
  9e:	71 09       	sbc	r23, r1
  a0:	81 09       	sbc	r24, r1
  a2:	91 09       	sbc	r25, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	61 15       	cp	r22, r1
  a8:	71 05       	cpc	r23, r1
  aa:	81 05       	cpc	r24, r1
  ac:	91 05       	cpc	r25, r1
  ae:	b1 f7       	brne	.-20     	; 0x9c <_Z12delay_reducel+0xa>
  b0:	08 95       	ret

000000b2 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	41 f4       	brne	.+16     	; 0xc6 <_Z12delay_secondi+0x14>
  b6:	08 95       	ret
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
	{
		for(j=65535;j!=0;j--);
  bc:	e9 f7       	brne	.-6      	; 0xb8 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  be:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	19 f4       	brne	.+6      	; 0xca <_Z12delay_secondi+0x18>
  c4:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	25 2f       	mov	r18, r21
  cc:	34 2f       	mov	r19, r20
  ce:	f4 cf       	rjmp	.-24     	; 0xb8 <_Z12delay_secondi+0x6>

000000d0 <_Z8LED_INITv>:

//************初始化
void LED_INIT()
{
	
	LED_PORT = 0X00;
  d0:	1b ba       	out	0x1b, r1	; 27
	
	LED_DDR = 0XFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret

000000d8 <_Z20IR_receiver_model_upv>:
	}
}
//设置为上升沿捕获
void IR_receiver_model_up()
{
	TCCR1B |= (1<<ICES1);
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8e bd       	out	0x2e, r24	; 46
	TIFR |= (1<<ICF1);
  de:	88 b7       	in	r24, 0x38	; 56
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	88 bf       	out	0x38, r24	; 56
  e4:	08 95       	ret

000000e6 <_Z22IR_receiver_model_downv>:
}
//设置为下降沿捕获
void IR_receiver_model_down()
{
	TCCR1B &= ~(1<<ICES1);
  e6:	8e b5       	in	r24, 0x2e	; 46
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	8e bd       	out	0x2e, r24	; 46
	TIFR |= (1<<ICF1);
  ec:	88 b7       	in	r24, 0x38	; 56
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	88 bf       	out	0x38, r24	; 56
  f2:	08 95       	ret

000000f4 <_Z16IR_receiver_inith>:
 *使用timer1的icr1捕获
 */

void IR_receiver_init(uchar edge)//edge = 1 means up model and = 0 means down edge model
{
	IR_receiver_DDR &= ~(1<<IR_receiver_OUT);  IR_sender_PORT |= (1 << IR_sender_OUT);//相应端口设为接收并且置为高电平
  f4:	8e 98       	cbi	0x11, 6	; 17
  f6:	c3 9a       	sbi	0x18, 3	; 24
	TIMSK |= (1<<TICIE1);//中断初始化
  f8:	99 b7       	in	r25, 0x39	; 57
  fa:	90 62       	ori	r25, 0x20	; 32
  fc:	99 bf       	out	0x39, r25	; 57
	TCCR1B |= (1<<ICNC1)|(1<<CS12);FN_IR = 256;//噪声抑制 下降沿触发 256分频
  fe:	9e b5       	in	r25, 0x2e	; 46
 100:	94 68       	ori	r25, 0x84	; 132
 102:	9e bd       	out	0x2e, r25	; 46
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	31 e0       	ldi	r19, 0x01	; 1
 108:	30 93 61 00 	sts	0x0061, r19
 10c:	20 93 60 00 	sts	0x0060, r18
	TCNT1 = 0x00;//计数器初始化
 110:	1d bc       	out	0x2d, r1	; 45
 112:	1c bc       	out	0x2c, r1	; 44
	if (edge == 0)
 114:	81 11       	cpse	r24, r1
 116:	03 c0       	rjmp	.+6      	; 0x11e <_Z16IR_receiver_inith+0x2a>
	{
		IR_receiver_model_down();
 118:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z22IR_receiver_model_downv>
 11c:	08 95       	ret
	}
	else
	{
		IR_receiver_model_up();
 11e:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z20IR_receiver_model_upv>
 122:	08 95       	ret

00000124 <_Z24IR_receiver_model_changeh>:
}

uchar IR_receiver_model_change(uchar model)//model == 1 is model up and == 0 is model down
//to use this function it's better to take model = IR_receiver_model_change(model);so that model can get the return value
{
	if (model == 0)
 124:	81 11       	cpse	r24, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <_Z24IR_receiver_model_changeh+0xc>
	{
		
		
		IR_receiver_model_up();
 128:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z20IR_receiver_model_upv>
		
		return 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret
	}
	else
	{
		
		IR_receiver_model_down();
 130:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z22IR_receiver_model_downv>
		
		return 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
 136:	08 95       	ret

00000138 <_Z17IR_receiver_catchv>:
uchar count = 0;


void IR_receiver_catch()
{
	new_num = ICR1;
 138:	86 b5       	in	r24, 0x26	; 38
 13a:	97 b5       	in	r25, 0x27	; 39
 13c:	90 93 70 00 	sts	0x0070, r25
 140:	80 93 6f 00 	sts	0x006F, r24
	change_num = new_num - old_num;
 144:	20 91 71 00 	lds	r18, 0x0071
 148:	30 91 72 00 	lds	r19, 0x0072
 14c:	ac 01       	movw	r20, r24
 14e:	42 1b       	sub	r20, r18
 150:	53 0b       	sbc	r21, r19
 152:	50 93 6e 00 	sts	0x006E, r21
 156:	40 93 6d 00 	sts	0x006D, r20
	old_num = new_num;
 15a:	90 93 72 00 	sts	0x0072, r25
 15e:	80 93 71 00 	sts	0x0071, r24
 162:	08 95       	ret

00000164 <__vector_5>:
}

ISR(TIMER1_CAPT_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	IR_receiver_catch();
 186:	0e 94 9c 00 	call	0x138	; 0x138 <_Z17IR_receiver_catchv>
	
	model = IR_receiver_model_change(model);
 18a:	80 91 76 00 	lds	r24, 0x0076
 18e:	0e 94 92 00 	call	0x124	; 0x124 <_Z24IR_receiver_model_changeh>
 192:	80 93 76 00 	sts	0x0076, r24
	figure = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 75 00 	sts	0x0075, r24
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <main>:



int main(void)
{
    LED_INIT();
 1be:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z8LED_INITv>
    
    LED_PORT = 0x00;
 1c2:	1b ba       	out	0x1b, r1	; 27
    
    IR_receiver_init(0);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z16IR_receiver_inith>
    
    //M16_USART_SEND_INIT();
    
    sei();
 1ca:	78 94       	sei
		     
	     }
	     if (lister >= 6)
	     {
		     delay_second(25);
		     LED_PORT = buffer[0];
 1cc:	c3 e6       	ldi	r28, 0x63	; 99
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
    sei();
    
    while(1)
    {
	    
	     if (figure == 0)
 1d0:	80 91 75 00 	lds	r24, 0x0075
 1d4:	81 11       	cpse	r24, r1
 1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <main+0x28>
	     {
		     delay_reduce(1);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 1e4:	23 c0       	rjmp	.+70     	; 0x22c <main+0x6e>
	     }
	     else
	     {
		     
		     figure = 0;
 1e6:	10 92 75 00 	sts	0x0075, r1
		     lister++;
 1ea:	80 91 73 00 	lds	r24, 0x0073
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	80 93 73 00 	sts	0x0073, r24
		     time = change_num/28.8;
 1f4:	60 91 6d 00 	lds	r22, 0x006D
 1f8:	70 91 6e 00 	lds	r23, 0x006E
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__floatunsisf>
 204:	26 e6       	ldi	r18, 0x66	; 102
 206:	36 e6       	ldi	r19, 0x66	; 102
 208:	46 ee       	ldi	r20, 0xE6	; 230
 20a:	51 e4       	ldi	r21, 0x41	; 65
 20c:	0e 94 4b 01 	call	0x296	; 0x296 <__divsf3>
 210:	0e 94 bd 01 	call	0x37a	; 0x37a <__fixunssfsi>
 214:	60 93 74 00 	sts	0x0074, r22
		     buffer[count] = time;
 218:	80 91 62 00 	lds	r24, 0x0062
 21c:	e8 2f       	mov	r30, r24
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ed 59       	subi	r30, 0x9D	; 157
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	60 83       	st	Z, r22
		     count ++;
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 62 00 	sts	0x0062, r24
		     
	     }
	     if (lister >= 6)
 22c:	80 91 73 00 	lds	r24, 0x0073
 230:	86 30       	cpi	r24, 0x06	; 6
 232:	70 f2       	brcs	.-100    	; 0x1d0 <main+0x12>
	     {
		     delay_second(25);
 234:	89 e1       	ldi	r24, 0x19	; 25
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12delay_secondi>
		     LED_PORT = buffer[0];
 23c:	88 81       	ld	r24, Y
 23e:	8b bb       	out	0x1b, r24	; 27
		     delay_second(25);
 240:	89 e1       	ldi	r24, 0x19	; 25
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12delay_secondi>
		     LED_PORT = buffer[1];
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	8b bb       	out	0x1b, r24	; 27
		     delay_second(25);
 24c:	89 e1       	ldi	r24, 0x19	; 25
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12delay_secondi>
		     LED_PORT = buffer[2];
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	8b bb       	out	0x1b, r24	; 27
		     delay_second(25);
 258:	89 e1       	ldi	r24, 0x19	; 25
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12delay_secondi>
		     LED_PORT = buffer[3];
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	8b bb       	out	0x1b, r24	; 27
		     delay_second(25);
 264:	89 e1       	ldi	r24, 0x19	; 25
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12delay_secondi>
		     LED_PORT = buffer[4];
 26c:	8c 81       	ldd	r24, Y+4	; 0x04
 26e:	8b bb       	out	0x1b, r24	; 27
		     delay_second(25);
 270:	89 e1       	ldi	r24, 0x19	; 25
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12delay_secondi>
		     LED_PORT = buffer[5];
 278:	8d 81       	ldd	r24, Y+5	; 0x05
 27a:	8b bb       	out	0x1b, r24	; 27
		     delay_second(25);
 27c:	89 e1       	ldi	r24, 0x19	; 25
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12delay_secondi>
		     LED_PORT = buffer[6];
 284:	8e 81       	ldd	r24, Y+6	; 0x06
 286:	8b bb       	out	0x1b, r24	; 27
		     delay_second(25);
 288:	89 e1       	ldi	r24, 0x19	; 25
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12delay_secondi>
		     LED_PORT = buffer[7];
 290:	8f 81       	ldd	r24, Y+7	; 0x07
 292:	8b bb       	out	0x1b, r24	; 27
 294:	9d cf       	rjmp	.-198    	; 0x1d0 <main+0x12>

00000296 <__divsf3>:
 296:	0e 94 5f 01 	call	0x2be	; 0x2be <__divsf3x>
 29a:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_round>
 29e:	0e 94 39 02 	call	0x472	; 0x472 <__fp_pscB>
 2a2:	58 f0       	brcs	.+22     	; 0x2ba <__divsf3+0x24>
 2a4:	0e 94 32 02 	call	0x464	; 0x464 <__fp_pscA>
 2a8:	40 f0       	brcs	.+16     	; 0x2ba <__divsf3+0x24>
 2aa:	29 f4       	brne	.+10     	; 0x2b6 <__divsf3+0x20>
 2ac:	5f 3f       	cpi	r21, 0xFF	; 255
 2ae:	29 f0       	breq	.+10     	; 0x2ba <__divsf3+0x24>
 2b0:	0c 94 29 02 	jmp	0x452	; 0x452 <__fp_inf>
 2b4:	51 11       	cpse	r21, r1
 2b6:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_szero>
 2ba:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__fp_nan>

000002be <__divsf3x>:
 2be:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_split3>
 2c2:	68 f3       	brcs	.-38     	; 0x29e <__divsf3+0x8>

000002c4 <__divsf3_pse>:
 2c4:	99 23       	and	r25, r25
 2c6:	b1 f3       	breq	.-20     	; 0x2b4 <__divsf3+0x1e>
 2c8:	55 23       	and	r21, r21
 2ca:	91 f3       	breq	.-28     	; 0x2b0 <__divsf3+0x1a>
 2cc:	95 1b       	sub	r25, r21
 2ce:	55 0b       	sbc	r21, r21
 2d0:	bb 27       	eor	r27, r27
 2d2:	aa 27       	eor	r26, r26
 2d4:	62 17       	cp	r22, r18
 2d6:	73 07       	cpc	r23, r19
 2d8:	84 07       	cpc	r24, r20
 2da:	38 f0       	brcs	.+14     	; 0x2ea <__divsf3_pse+0x26>
 2dc:	9f 5f       	subi	r25, 0xFF	; 255
 2de:	5f 4f       	sbci	r21, 0xFF	; 255
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	44 1f       	adc	r20, r20
 2e6:	aa 1f       	adc	r26, r26
 2e8:	a9 f3       	breq	.-22     	; 0x2d4 <__divsf3_pse+0x10>
 2ea:	35 d0       	rcall	.+106    	; 0x356 <__divsf3_pse+0x92>
 2ec:	0e 2e       	mov	r0, r30
 2ee:	3a f0       	brmi	.+14     	; 0x2fe <__divsf3_pse+0x3a>
 2f0:	e0 e8       	ldi	r30, 0x80	; 128
 2f2:	32 d0       	rcall	.+100    	; 0x358 <__divsf3_pse+0x94>
 2f4:	91 50       	subi	r25, 0x01	; 1
 2f6:	50 40       	sbci	r21, 0x00	; 0
 2f8:	e6 95       	lsr	r30
 2fa:	00 1c       	adc	r0, r0
 2fc:	ca f7       	brpl	.-14     	; 0x2f0 <__divsf3_pse+0x2c>
 2fe:	2b d0       	rcall	.+86     	; 0x356 <__divsf3_pse+0x92>
 300:	fe 2f       	mov	r31, r30
 302:	29 d0       	rcall	.+82     	; 0x356 <__divsf3_pse+0x92>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	88 1f       	adc	r24, r24
 30a:	bb 1f       	adc	r27, r27
 30c:	26 17       	cp	r18, r22
 30e:	37 07       	cpc	r19, r23
 310:	48 07       	cpc	r20, r24
 312:	ab 07       	cpc	r26, r27
 314:	b0 e8       	ldi	r27, 0x80	; 128
 316:	09 f0       	breq	.+2      	; 0x31a <__divsf3_pse+0x56>
 318:	bb 0b       	sbc	r27, r27
 31a:	80 2d       	mov	r24, r0
 31c:	bf 01       	movw	r22, r30
 31e:	ff 27       	eor	r31, r31
 320:	93 58       	subi	r25, 0x83	; 131
 322:	5f 4f       	sbci	r21, 0xFF	; 255
 324:	3a f0       	brmi	.+14     	; 0x334 <__divsf3_pse+0x70>
 326:	9e 3f       	cpi	r25, 0xFE	; 254
 328:	51 05       	cpc	r21, r1
 32a:	78 f0       	brcs	.+30     	; 0x34a <__divsf3_pse+0x86>
 32c:	0c 94 29 02 	jmp	0x452	; 0x452 <__fp_inf>
 330:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_szero>
 334:	5f 3f       	cpi	r21, 0xFF	; 255
 336:	e4 f3       	brlt	.-8      	; 0x330 <__divsf3_pse+0x6c>
 338:	98 3e       	cpi	r25, 0xE8	; 232
 33a:	d4 f3       	brlt	.-12     	; 0x330 <__divsf3_pse+0x6c>
 33c:	86 95       	lsr	r24
 33e:	77 95       	ror	r23
 340:	67 95       	ror	r22
 342:	b7 95       	ror	r27
 344:	f7 95       	ror	r31
 346:	9f 5f       	subi	r25, 0xFF	; 255
 348:	c9 f7       	brne	.-14     	; 0x33c <__divsf3_pse+0x78>
 34a:	88 0f       	add	r24, r24
 34c:	91 1d       	adc	r25, r1
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
 352:	97 f9       	bld	r25, 7
 354:	08 95       	ret
 356:	e1 e0       	ldi	r30, 0x01	; 1
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	bb 1f       	adc	r27, r27
 360:	62 17       	cp	r22, r18
 362:	73 07       	cpc	r23, r19
 364:	84 07       	cpc	r24, r20
 366:	ba 07       	cpc	r27, r26
 368:	20 f0       	brcs	.+8      	; 0x372 <__divsf3_pse+0xae>
 36a:	62 1b       	sub	r22, r18
 36c:	73 0b       	sbc	r23, r19
 36e:	84 0b       	sbc	r24, r20
 370:	ba 0b       	sbc	r27, r26
 372:	ee 1f       	adc	r30, r30
 374:	88 f7       	brcc	.-30     	; 0x358 <__divsf3_pse+0x94>
 376:	e0 95       	com	r30
 378:	08 95       	ret

0000037a <__fixunssfsi>:
 37a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__fp_splitA>
 37e:	88 f0       	brcs	.+34     	; 0x3a2 <__fixunssfsi+0x28>
 380:	9f 57       	subi	r25, 0x7F	; 127
 382:	98 f0       	brcs	.+38     	; 0x3aa <__fixunssfsi+0x30>
 384:	b9 2f       	mov	r27, r25
 386:	99 27       	eor	r25, r25
 388:	b7 51       	subi	r27, 0x17	; 23
 38a:	b0 f0       	brcs	.+44     	; 0x3b8 <__fixunssfsi+0x3e>
 38c:	e1 f0       	breq	.+56     	; 0x3c6 <__fixunssfsi+0x4c>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	88 1f       	adc	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	1a f0       	brmi	.+6      	; 0x39e <__fixunssfsi+0x24>
 398:	ba 95       	dec	r27
 39a:	c9 f7       	brne	.-14     	; 0x38e <__fixunssfsi+0x14>
 39c:	14 c0       	rjmp	.+40     	; 0x3c6 <__fixunssfsi+0x4c>
 39e:	b1 30       	cpi	r27, 0x01	; 1
 3a0:	91 f0       	breq	.+36     	; 0x3c6 <__fixunssfsi+0x4c>
 3a2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fp_zero>
 3a6:	b1 e0       	ldi	r27, 0x01	; 1
 3a8:	08 95       	ret
 3aa:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_zero>
 3ae:	67 2f       	mov	r22, r23
 3b0:	78 2f       	mov	r23, r24
 3b2:	88 27       	eor	r24, r24
 3b4:	b8 5f       	subi	r27, 0xF8	; 248
 3b6:	39 f0       	breq	.+14     	; 0x3c6 <__fixunssfsi+0x4c>
 3b8:	b9 3f       	cpi	r27, 0xF9	; 249
 3ba:	cc f3       	brlt	.-14     	; 0x3ae <__fixunssfsi+0x34>
 3bc:	86 95       	lsr	r24
 3be:	77 95       	ror	r23
 3c0:	67 95       	ror	r22
 3c2:	b3 95       	inc	r27
 3c4:	d9 f7       	brne	.-10     	; 0x3bc <__fixunssfsi+0x42>
 3c6:	3e f4       	brtc	.+14     	; 0x3d6 <__fixunssfsi+0x5c>
 3c8:	90 95       	com	r25
 3ca:	80 95       	com	r24
 3cc:	70 95       	com	r23
 3ce:	61 95       	neg	r22
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	8f 4f       	sbci	r24, 0xFF	; 255
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	08 95       	ret

000003d8 <__floatunsisf>:
 3d8:	e8 94       	clt
 3da:	09 c0       	rjmp	.+18     	; 0x3ee <__floatsisf+0x12>

000003dc <__floatsisf>:
 3dc:	97 fb       	bst	r25, 7
 3de:	3e f4       	brtc	.+14     	; 0x3ee <__floatsisf+0x12>
 3e0:	90 95       	com	r25
 3e2:	80 95       	com	r24
 3e4:	70 95       	com	r23
 3e6:	61 95       	neg	r22
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	8f 4f       	sbci	r24, 0xFF	; 255
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	99 23       	and	r25, r25
 3f0:	a9 f0       	breq	.+42     	; 0x41c <__floatsisf+0x40>
 3f2:	f9 2f       	mov	r31, r25
 3f4:	96 e9       	ldi	r25, 0x96	; 150
 3f6:	bb 27       	eor	r27, r27
 3f8:	93 95       	inc	r25
 3fa:	f6 95       	lsr	r31
 3fc:	87 95       	ror	r24
 3fe:	77 95       	ror	r23
 400:	67 95       	ror	r22
 402:	b7 95       	ror	r27
 404:	f1 11       	cpse	r31, r1
 406:	f8 cf       	rjmp	.-16     	; 0x3f8 <__floatsisf+0x1c>
 408:	fa f4       	brpl	.+62     	; 0x448 <__floatsisf+0x6c>
 40a:	bb 0f       	add	r27, r27
 40c:	11 f4       	brne	.+4      	; 0x412 <__floatsisf+0x36>
 40e:	60 ff       	sbrs	r22, 0
 410:	1b c0       	rjmp	.+54     	; 0x448 <__floatsisf+0x6c>
 412:	6f 5f       	subi	r22, 0xFF	; 255
 414:	7f 4f       	sbci	r23, 0xFF	; 255
 416:	8f 4f       	sbci	r24, 0xFF	; 255
 418:	9f 4f       	sbci	r25, 0xFF	; 255
 41a:	16 c0       	rjmp	.+44     	; 0x448 <__floatsisf+0x6c>
 41c:	88 23       	and	r24, r24
 41e:	11 f0       	breq	.+4      	; 0x424 <__floatsisf+0x48>
 420:	96 e9       	ldi	r25, 0x96	; 150
 422:	11 c0       	rjmp	.+34     	; 0x446 <__floatsisf+0x6a>
 424:	77 23       	and	r23, r23
 426:	21 f0       	breq	.+8      	; 0x430 <__floatsisf+0x54>
 428:	9e e8       	ldi	r25, 0x8E	; 142
 42a:	87 2f       	mov	r24, r23
 42c:	76 2f       	mov	r23, r22
 42e:	05 c0       	rjmp	.+10     	; 0x43a <__floatsisf+0x5e>
 430:	66 23       	and	r22, r22
 432:	71 f0       	breq	.+28     	; 0x450 <__floatsisf+0x74>
 434:	96 e8       	ldi	r25, 0x86	; 134
 436:	86 2f       	mov	r24, r22
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	2a f0       	brmi	.+10     	; 0x448 <__floatsisf+0x6c>
 43e:	9a 95       	dec	r25
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	88 1f       	adc	r24, r24
 446:	da f7       	brpl	.-10     	; 0x43e <__floatsisf+0x62>
 448:	88 0f       	add	r24, r24
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	97 f9       	bld	r25, 7
 450:	08 95       	ret

00000452 <__fp_inf>:
 452:	97 f9       	bld	r25, 7
 454:	9f 67       	ori	r25, 0x7F	; 127
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	08 95       	ret

0000045e <__fp_nan>:
 45e:	9f ef       	ldi	r25, 0xFF	; 255
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	08 95       	ret

00000464 <__fp_pscA>:
 464:	00 24       	eor	r0, r0
 466:	0a 94       	dec	r0
 468:	16 16       	cp	r1, r22
 46a:	17 06       	cpc	r1, r23
 46c:	18 06       	cpc	r1, r24
 46e:	09 06       	cpc	r0, r25
 470:	08 95       	ret

00000472 <__fp_pscB>:
 472:	00 24       	eor	r0, r0
 474:	0a 94       	dec	r0
 476:	12 16       	cp	r1, r18
 478:	13 06       	cpc	r1, r19
 47a:	14 06       	cpc	r1, r20
 47c:	05 06       	cpc	r0, r21
 47e:	08 95       	ret

00000480 <__fp_round>:
 480:	09 2e       	mov	r0, r25
 482:	03 94       	inc	r0
 484:	00 0c       	add	r0, r0
 486:	11 f4       	brne	.+4      	; 0x48c <__fp_round+0xc>
 488:	88 23       	and	r24, r24
 48a:	52 f0       	brmi	.+20     	; 0x4a0 <__fp_round+0x20>
 48c:	bb 0f       	add	r27, r27
 48e:	40 f4       	brcc	.+16     	; 0x4a0 <__fp_round+0x20>
 490:	bf 2b       	or	r27, r31
 492:	11 f4       	brne	.+4      	; 0x498 <__fp_round+0x18>
 494:	60 ff       	sbrs	r22, 0
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__fp_round+0x20>
 498:	6f 5f       	subi	r22, 0xFF	; 255
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	8f 4f       	sbci	r24, 0xFF	; 255
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <__fp_split3>:
 4a2:	57 fd       	sbrc	r21, 7
 4a4:	90 58       	subi	r25, 0x80	; 128
 4a6:	44 0f       	add	r20, r20
 4a8:	55 1f       	adc	r21, r21
 4aa:	59 f0       	breq	.+22     	; 0x4c2 <__fp_splitA+0x10>
 4ac:	5f 3f       	cpi	r21, 0xFF	; 255
 4ae:	71 f0       	breq	.+28     	; 0x4cc <__fp_splitA+0x1a>
 4b0:	47 95       	ror	r20

000004b2 <__fp_splitA>:
 4b2:	88 0f       	add	r24, r24
 4b4:	97 fb       	bst	r25, 7
 4b6:	99 1f       	adc	r25, r25
 4b8:	61 f0       	breq	.+24     	; 0x4d2 <__fp_splitA+0x20>
 4ba:	9f 3f       	cpi	r25, 0xFF	; 255
 4bc:	79 f0       	breq	.+30     	; 0x4dc <__fp_splitA+0x2a>
 4be:	87 95       	ror	r24
 4c0:	08 95       	ret
 4c2:	12 16       	cp	r1, r18
 4c4:	13 06       	cpc	r1, r19
 4c6:	14 06       	cpc	r1, r20
 4c8:	55 1f       	adc	r21, r21
 4ca:	f2 cf       	rjmp	.-28     	; 0x4b0 <__fp_split3+0xe>
 4cc:	46 95       	lsr	r20
 4ce:	f1 df       	rcall	.-30     	; 0x4b2 <__fp_splitA>
 4d0:	08 c0       	rjmp	.+16     	; 0x4e2 <__fp_splitA+0x30>
 4d2:	16 16       	cp	r1, r22
 4d4:	17 06       	cpc	r1, r23
 4d6:	18 06       	cpc	r1, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	f1 cf       	rjmp	.-30     	; 0x4be <__fp_splitA+0xc>
 4dc:	86 95       	lsr	r24
 4de:	71 05       	cpc	r23, r1
 4e0:	61 05       	cpc	r22, r1
 4e2:	08 94       	sec
 4e4:	08 95       	ret

000004e6 <__fp_zero>:
 4e6:	e8 94       	clt

000004e8 <__fp_szero>:
 4e8:	bb 27       	eor	r27, r27
 4ea:	66 27       	eor	r22, r22
 4ec:	77 27       	eor	r23, r23
 4ee:	cb 01       	movw	r24, r22
 4f0:	97 f9       	bld	r25, 7
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
