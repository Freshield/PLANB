
PLANB_USART_RECEIVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800078  00800078  000004b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000869  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000198  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000026c  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ca  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00002281  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_11>
  30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_12>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 39       	cpi	r26, 0x9D	; 157
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  8a:	0c 94 00 02 	jmp	0x400	; 0x400 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  92:	61 15       	cp	r22, r1
  94:	71 05       	cpc	r23, r1
  96:	81 05       	cpc	r24, r1
  98:	91 05       	cpc	r25, r1
  9a:	51 f0       	breq	.+20     	; 0xb0 <_Z12delay_reducel+0x1e>
	{
		delay--;
  9c:	61 50       	subi	r22, 0x01	; 1
  9e:	71 09       	sbc	r23, r1
  a0:	81 09       	sbc	r24, r1
  a2:	91 09       	sbc	r25, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	61 15       	cp	r22, r1
  a8:	71 05       	cpc	r23, r1
  aa:	81 05       	cpc	r24, r1
  ac:	91 05       	cpc	r25, r1
  ae:	b1 f7       	brne	.-20     	; 0x9c <_Z12delay_reducel+0xa>
  b0:	08 95       	ret

000000b2 <_Z13LCD_BUSY_WAITv>:
#define E_0() LCD_CON_PORT &= ~(1<<E)//***********E口由高变低时候 液晶模块使能

//****************************忙等待
void LCD_BUSY_WAIT()
{
	RS_0();RW_1();
  b2:	d8 98       	cbi	0x1b, 0	; 27
  b4:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DAT_DDR=0X00;
  b6:	17 ba       	out	0x17, r1	; 23
	E_1();delay_reduce(10);
  b8:	da 9a       	sbi	0x1b, 2	; 27
  ba:	6a e0       	ldi	r22, 0x0A	; 10
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	while(LCD_DAT_PIN & 0x80);//***********如果最高位BF为零则不忙
  c6:	b7 99       	sbic	0x16, 7	; 22
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <_Z13LCD_BUSY_WAITv+0x14>
	E_0();
  ca:	da 98       	cbi	0x1b, 2	; 27
	LCD_DAT_DDR=0xff;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	08 95       	ret

000000d2 <_Z17WRITE_LCD_COMMANDh>:
	
	
}
//**************************LCD 写指令
void WRITE_LCD_COMMAND(uchar cmd)
{
  d2:	cf 93       	push	r28
  d4:	c8 2f       	mov	r28, r24
	LCD_BUSY_WAIT();
  d6:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z13LCD_BUSY_WAITv>
	RS_0();RW_0();
  da:	d8 98       	cbi	0x1b, 0	; 27
  dc:	d9 98       	cbi	0x1b, 1	; 27
	LCD_DAT_PORT = cmd;
  de:	c8 bb       	out	0x18, r28	; 24
	E_1();E_0();
  e0:	da 9a       	sbi	0x1b, 2	; 27
  e2:	da 98       	cbi	0x1b, 2	; 27
	
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <_Z14WRITE_LCD_DATAh>:
	
	
}
//************************LCD 写数据
void WRITE_LCD_DATA(uchar dat)
{
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
	LCD_BUSY_WAIT();
  ec:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z13LCD_BUSY_WAITv>
	RS_1();RW_0();
  f0:	d8 9a       	sbi	0x1b, 0	; 27
  f2:	d9 98       	cbi	0x1b, 1	; 27
	LCD_DAT_PORT = dat;
  f4:	c8 bb       	out	0x18, r28	; 24
	E_1();E_0();
  f6:	da 9a       	sbi	0x1b, 2	; 27
  f8:	da 98       	cbi	0x1b, 2	; 27
	
	
	
}
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <_Z8LCD_initv>:
//*********************LCD 初始化
void LCD_init()
{
	
	LCD_DAT_DDR = 0XFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	87 bb       	out	0x17, r24	; 23
	LCD_CON_DDR |= (1<<RS)|(1<<RW)|(1<<E);
 102:	8a b3       	in	r24, 0x1a	; 26
 104:	87 60       	ori	r24, 0x07	; 7
 106:	8a bb       	out	0x1a, r24	; 26
	WRITE_LCD_COMMAND(0x01);delay_reduce(15);//**********清屏
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17WRITE_LCD_COMMANDh>
 10e:	6f e0       	ldi	r22, 0x0F	; 15
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	WRITE_LCD_COMMAND(0x06);delay_reduce(15);//**********显示模式 光标移动
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17WRITE_LCD_COMMANDh>
 120:	6f e0       	ldi	r22, 0x0F	; 15
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	WRITE_LCD_COMMAND(0x0c);delay_reduce(15);//**********显示开关 无光标 不闪烁
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17WRITE_LCD_COMMANDh>
 132:	6f e0       	ldi	r22, 0x0F	; 15
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	//WRITE_LCD_COMMAND(0x1c);delay_reduce(15);//**********移动显示的文字
	WRITE_LCD_COMMAND(0x38);delay_reduce(15);//**********显示 2行显示 5*7
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17WRITE_LCD_COMMANDh>
 144:	6f e0       	ldi	r22, 0x0F	; 15
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 150:	08 95       	ret

00000152 <_Z9LCD_CLEARv>:
	
}
//***************清屏程序
void LCD_CLEAR()
{
	WRITE_LCD_COMMAND(0x01);delay_reduce(5);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17WRITE_LCD_COMMANDh>
 158:	65 e0       	ldi	r22, 0x05	; 5
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 164:	08 95       	ret

00000166 <_Z15LCD_SHOW_STRINGhhPc>:
}


//********************LCD string显示程序
void LCD_SHOW_STRING(uchar x,uchar y,char *str) 
{
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ea 01       	movw	r28, r20
	
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
 16e:	61 11       	cpse	r22, r1
 170:	04 c0       	rjmp	.+8      	; 0x17a <_Z15LCD_SHOW_STRINGhhPc+0x14>
 172:	80 68       	ori	r24, 0x80	; 128
 174:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17WRITE_LCD_COMMANDh>
 178:	0e c0       	rjmp	.+28     	; 0x196 <_Z15LCD_SHOW_STRINGhhPc+0x30>
	if(y==1)WRITE_LCD_COMMAND(0xc0|x);
 17a:	61 30       	cpi	r22, 0x01	; 1
 17c:	61 f4       	brne	.+24     	; 0x196 <_Z15LCD_SHOW_STRINGhhPc+0x30>
 17e:	80 6c       	ori	r24, 0xC0	; 192
 180:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17WRITE_LCD_COMMANDh>
 184:	08 c0       	rjmp	.+16     	; 0x196 <_Z15LCD_SHOW_STRINGhhPc+0x30>
	
	for(count=0;count<16 && str[count]!='\0';count++)
	WRITE_LCD_DATA(str[count]);
 186:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z14WRITE_LCD_DATAh>
 18a:	11 50       	subi	r17, 0x01	; 1
	
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
	if(y==1)WRITE_LCD_COMMAND(0xc0|x);
	
	for(count=0;count<16 && str[count]!='\0';count++)
 18c:	61 f0       	breq	.+24     	; 0x1a6 <_Z15LCD_SHOW_STRINGhhPc+0x40>
 18e:	89 91       	ld	r24, Y+
 190:	81 11       	cpse	r24, r1
 192:	f9 cf       	rjmp	.-14     	; 0x186 <_Z15LCD_SHOW_STRINGhhPc+0x20>
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <_Z15LCD_SHOW_STRINGhhPc+0x40>
 196:	88 81       	ld	r24, Y
 198:	88 23       	and	r24, r24
 19a:	29 f0       	breq	.+10     	; 0x1a6 <_Z15LCD_SHOW_STRINGhhPc+0x40>
	WRITE_LCD_DATA(str[count]);
 19c:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z14WRITE_LCD_DATAh>
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	1f e0       	ldi	r17, 0x0F	; 15
 1a4:	f4 cf       	rjmp	.-24     	; 0x18e <_Z15LCD_SHOW_STRINGhhPc+0x28>
	
	
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	08 95       	ret

000001ae <_Z19M16_USART_SEND_INITv>:
//////////////////////////////////////////////////
////M16 USART
//////////////////////////////////////////////////
void M16_USART_SEND_INIT()
{
	UBRRL = 95;//********7.3728M 9600 BAUD U2X
 1ae:	8f e5       	ldi	r24, 0x5F	; 95
 1b0:	89 b9       	out	0x09, r24	; 9
	
	UCSRA |= (1 << U2X);//*********倍速模式
 1b2:	59 9a       	sbi	0x0b, 1	; 11
	
	UCSRB |= (1 << TXCIE)|(1 << UDRIE)|(1 << TXEN);//********发送中断 寄存器空中断 发送使能
 1b4:	8a b1       	in	r24, 0x0a	; 10
 1b6:	88 66       	ori	r24, 0x68	; 104
 1b8:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC |= (1 << URSEL)|(1 << UCSZ1)|(1 << UCSZ0);//*********异步操作 无校验 一位停止位 8位数据 
 1ba:	80 b5       	in	r24, 0x20	; 32
 1bc:	86 68       	ori	r24, 0x86	; 134
 1be:	80 bd       	out	0x20, r24	; 32
 1c0:	08 95       	ret

000001c2 <_Z19M16_USART_READ_INITv>:
	
}

void M16_USART_READ_INIT()
{
	UBRRL = 95;//***********7.3728 9600 BAUD U2X
 1c2:	8f e5       	ldi	r24, 0x5F	; 95
 1c4:	89 b9       	out	0x09, r24	; 9
	
	UCSRA |= (1 << U2X);//*************倍速模式
 1c6:	59 9a       	sbi	0x0b, 1	; 11
	
	UCSRB |= (1 << RXCIE)|(1 << RXEN);//*********接收中断 接收使能
 1c8:	8a b1       	in	r24, 0x0a	; 10
 1ca:	80 69       	ori	r24, 0x90	; 144
 1cc:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC |= (1 << URSEL)|(1 << UCSZ1)|(1 << UCSZ0);//*********异步操作 无校验 一位停止位 8位数据
 1ce:	80 b5       	in	r24, 0x20	; 32
 1d0:	86 68       	ori	r24, 0x86	; 134
 1d2:	80 bd       	out	0x20, r24	; 32
 1d4:	08 95       	ret

000001d6 <_Z20M16_USART_SEND_ALONEc>:
}

void M16_USART_SEND_ALONE(char data)
{
	/* 等待发送缓冲器为空 */
	while ( !( UCSRA & (1<<UDRE)) )
 1d6:	5d 9b       	sbis	0x0b, 5	; 11
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <_Z20M16_USART_SEND_ALONEc>
	;
	/* 将数据放入缓冲器，发送数据*/
	UDR = data;
 1da:	8c b9       	out	0x0c, r24	; 12
 1dc:	08 95       	ret

000001de <_Z21M16_USART_SEND_STRINGPcii>:
}
//参数:字符串首地址,字符串长度(使用'\0'来标识),光标归位标志位,换行标志位
//************本程序是必须把一个文字发完才能结束 
//*********有问题的部分：中断的添加可能会导致程序不通
void M16_USART_SEND_STRING(char data_string[],int r,int n)
{
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	7b 01       	movw	r14, r22
 1ee:	8a 01       	movw	r16, r20
	for (int i = 0;data_string[i] != '\0';i++)
 1f0:	88 81       	ld	r24, Y
 1f2:	88 23       	and	r24, r24
 1f4:	31 f0       	breq	.+12     	; 0x202 <_Z21M16_USART_SEND_STRINGPcii+0x24>
 1f6:	21 96       	adiw	r28, 0x01	; 1
	{
		M16_USART_SEND_ALONE(data_string[i]);
 1f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_Z20M16_USART_SEND_ALONEc>
//参数:字符串首地址,字符串长度(使用'\0'来标识),光标归位标志位,换行标志位
//************本程序是必须把一个文字发完才能结束 
//*********有问题的部分：中断的添加可能会导致程序不通
void M16_USART_SEND_STRING(char data_string[],int r,int n)
{
	for (int i = 0;data_string[i] != '\0';i++)
 1fc:	89 91       	ld	r24, Y+
 1fe:	81 11       	cpse	r24, r1
 200:	fb cf       	rjmp	.-10     	; 0x1f8 <_Z21M16_USART_SEND_STRINGPcii+0x1a>
	{
		M16_USART_SEND_ALONE(data_string[i]);
	}
	
	if (r == 0)
 202:	ef 28       	or	r14, r15
 204:	11 f4       	brne	.+4      	; 0x20a <_Z21M16_USART_SEND_STRINGPcii+0x2c>
	{
		asm volatile ("nop");
 206:	00 00       	nop
 208:	03 c0       	rjmp	.+6      	; 0x210 <_Z21M16_USART_SEND_STRINGPcii+0x32>
	}
	else
	{
		M16_USART_SEND_ALONE('\r');//光标归位
 20a:	8d e0       	ldi	r24, 0x0D	; 13
 20c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_Z20M16_USART_SEND_ALONEc>
	}
	
	if (n == 0)
 210:	01 2b       	or	r16, r17
 212:	11 f4       	brne	.+4      	; 0x218 <_Z21M16_USART_SEND_STRINGPcii+0x3a>
	{
		asm volatile ("nop");
 214:	00 00       	nop
 216:	03 c0       	rjmp	.+6      	; 0x21e <_Z21M16_USART_SEND_STRINGPcii+0x40>
	}
	else
	{
		M16_USART_SEND_ALONE('\n');//换行
 218:	8a e0       	ldi	r24, 0x0A	; 10
 21a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_Z20M16_USART_SEND_ALONEc>
	}
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	08 95       	ret

0000022c <__vector_13>:
char count = 0;
char line = 0;
char button = 0;

ISR(USART_TXC_vect)
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	delay_reduce(1);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_12>:
ISR(USART_UDRE_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
	delay_reduce(1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_11>:
ISR(USART_RXC_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
	
	
				if (line == 0)
 2e0:	80 91 79 00 	lds	r24, 0x0079
 2e4:	81 11       	cpse	r24, r1
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <__vector_11+0x34>
				{
					read0[count] = UDR;
 2e8:	e0 91 7a 00 	lds	r30, 0x007A
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	8c b1       	in	r24, 0x0c	; 12
 2f0:	e4 57       	subi	r30, 0x74	; 116
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	80 83       	st	Z, r24
					
					read0[count+1] = '\0';\
 2f6:	11 82       	std	Z+1, r1	; 0x01
					
					button = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 78 00 	sts	0x0078, r24
 2fe:	0b c0       	rjmp	.+22     	; 0x316 <__vector_11+0x4a>
					
				}
				else 
				{
					
					read1[count] = UDR;
 300:	e0 91 7a 00 	lds	r30, 0x007A
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	8c b1       	in	r24, 0x0c	; 12
 308:	e5 58       	subi	r30, 0x85	; 133
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	80 83       	st	Z, r24
					 
					read1[count+1] = '\0';
 30e:	11 82       	std	Z+1, r1	; 0x01
					
					button = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 78 00 	sts	0x0078, r24
					
				}
				
				count ++;
 316:	80 91 7a 00 	lds	r24, 0x007A
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	80 93 7a 00 	sts	0x007A, r24
			
	if (count >=16)
 320:	80 31       	cpi	r24, 0x10	; 16
 322:	00 f1       	brcs	.+64     	; 0x364 <__vector_11+0x98>
	{
		line ++;
 324:	80 91 79 00 	lds	r24, 0x0079
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 79 00 	sts	0x0079, r24
		count = 0;
 32e:	10 92 7a 00 	sts	0x007A, r1
		if (line == 1)
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	51 f4       	brne	.+20     	; 0x34a <__vector_11+0x7e>
 336:	eb e7       	ldi	r30, 0x7B	; 123
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	8b e8       	ldi	r24, 0x8B	; 139
 33c:	90 e0       	ldi	r25, 0x00	; 0
		{
			for (char i = 0;i < 16;i ++)
			{
				read1[i] = 0x20;
 33e:	20 e2       	ldi	r18, 0x20	; 32
 340:	21 93       	st	Z+, r18
	{
		line ++;
		count = 0;
		if (line == 1)
		{
			for (char i = 0;i < 16;i ++)
 342:	e8 17       	cp	r30, r24
 344:	f9 07       	cpc	r31, r25
 346:	e1 f7       	brne	.-8      	; 0x340 <__vector_11+0x74>
 348:	0d c0       	rjmp	.+26     	; 0x364 <__vector_11+0x98>
			{
				read1[i] = 0x20;
			}
		}
		
		else if (line >= 2)
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	58 f0       	brcs	.+22     	; 0x364 <__vector_11+0x98>
		{
			line = 0;
 34e:	10 92 79 00 	sts	0x0079, r1
 352:	ec e8       	ldi	r30, 0x8C	; 140
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	8c e9       	ldi	r24, 0x9C	; 156
 358:	90 e0       	ldi	r25, 0x00	; 0
			for (char i = 0;i < 16;i ++)
			{
				read0[i] = 0x20;
 35a:	20 e2       	ldi	r18, 0x20	; 32
 35c:	21 93       	st	Z+, r18
		}
		
		else if (line >= 2)
		{
			line = 0;
			for (char i = 0;i < 16;i ++)
 35e:	e8 17       	cp	r30, r24
 360:	f9 07       	cpc	r31, r25
 362:	e1 f7       	brne	.-8      	; 0x35c <__vector_11+0x90>
				read0[i] = 0x20;
			}
		}
		
	}
}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <main>:

int main(void)
{
	
	M16_USART_READ_INIT();
 378:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z19M16_USART_READ_INITv>
	
	M16_USART_SEND_INIT();
 37c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z19M16_USART_SEND_INITv>
	 
	LCD_init();
 380:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z8LCD_initv>
	
	 LCD_SHOW_STRING(0,0,"WAITING THE DATA") ;
 384:	40 e6       	ldi	r20, 0x60	; 96
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 b3 00 	call	0x166	; 0x166 <_Z15LCD_SHOW_STRINGhhPc>
	 
	 sei();
 390:	78 94       	sei
	
    while(1)
    {
		switch (button)
 392:	80 91 78 00 	lds	r24, 0x0078
 396:	88 23       	and	r24, r24
 398:	19 f0       	breq	.+6      	; 0x3a0 <main+0x28>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	41 f0       	breq	.+16     	; 0x3ae <main+0x36>
 39e:	2d c0       	rjmp	.+90     	; 0x3fa <main+0x82>
		{
			case 0: delay_reduce(10);
 3a0:	6a e0       	ldi	r22, 0x0A	; 10
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
			
			break;
 3ac:	f2 cf       	rjmp	.-28     	; 0x392 <main+0x1a>
			
			case 1: 
			
			LCD_CLEAR();
 3ae:	0e 94 a9 00 	call	0x152	; 0x152 <_Z9LCD_CLEARv>
			
			//LCD_SHOW_STRING(0,0,read0);
			
			LCD_SHOW_STRING(0,0,"NO WAY");
 3b2:	41 e7       	ldi	r20, 0x71	; 113
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 b3 00 	call	0x166	; 0x166 <_Z15LCD_SHOW_STRINGhhPc>
			//LCD_SHOW_STRING(0,1,read1);
			LCD_SHOW_STRING(0,1,"NO WAY");
 3be:	41 e7       	ldi	r20, 0x71	; 113
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 b3 00 	call	0x166	; 0x166 <_Z15LCD_SHOW_STRINGhhPc>
			if (line == 0)
 3ca:	80 91 79 00 	lds	r24, 0x0079
 3ce:	81 11       	cpse	r24, r1
 3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <main+0x6c>
			{
				
				//M16_USART_SEND_STRING(read0,1,1);
				
				M16_USART_SEND_STRING("NO WAY",1,1);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	81 e7       	ldi	r24, 0x71	; 113
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z21M16_USART_SEND_STRINGPcii>
 3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <main+0x7c>
			else
			{
				
				//M16_USART_SEND_STRING(read1,1,1);
				
				M16_USART_SEND_STRING("NO WAY",1,1);
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	81 e7       	ldi	r24, 0x71	; 113
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z21M16_USART_SEND_STRINGPcii>
				
				
			}
			
			button = 0;
 3f4:	10 92 78 00 	sts	0x0078, r1
			
			break;
 3f8:	cc cf       	rjmp	.-104    	; 0x392 <main+0x1a>
			
			default: button = 0;
 3fa:	10 92 78 00 	sts	0x0078, r1
			
			break;
 3fe:	c9 cf       	rjmp	.-110    	; 0x392 <main+0x1a>

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
