
PLANB_LCD1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000222  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005bb  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011a  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ff  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030e  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000555  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001603  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  7a:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z12delay_reducel>:
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  82:	61 15       	cp	r22, r1
  84:	71 05       	cpc	r23, r1
  86:	81 05       	cpc	r24, r1
  88:	91 05       	cpc	r25, r1
  8a:	51 f0       	breq	.+20     	; 0xa0 <_Z12delay_reducel+0x1e>
	{
		delay--;
  8c:	61 50       	subi	r22, 0x01	; 1
  8e:	71 09       	sbc	r23, r1
  90:	81 09       	sbc	r24, r1
  92:	91 09       	sbc	r25, r1
		asm volatile ("nop");
  94:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	61 15       	cp	r22, r1
  98:	71 05       	cpc	r23, r1
  9a:	81 05       	cpc	r24, r1
  9c:	91 05       	cpc	r25, r1
  9e:	b1 f7       	brne	.-20     	; 0x8c <_Z12delay_reducel+0xa>
  a0:	08 95       	ret

000000a2 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	41 f4       	brne	.+16     	; 0xb6 <_Z12delay_secondi+0x14>
  a6:	08 95       	ret
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	31 09       	sbc	r19, r1
	{
		for(j=65535;j!=0;j--);
  ac:	e9 f7       	brne	.-6      	; 0xa8 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  ae:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	19 f4       	brne	.+6      	; 0xba <_Z12delay_secondi+0x18>
  b4:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  b6:	5f ef       	ldi	r21, 0xFF	; 255
  b8:	4f ef       	ldi	r20, 0xFF	; 255
  ba:	25 2f       	mov	r18, r21
  bc:	34 2f       	mov	r19, r20
  be:	f4 cf       	rjmp	.-24     	; 0xa8 <_Z12delay_secondi+0x6>

000000c0 <_Z13LCD_BUSY_WAITv>:
#define E_0() LCD_CON_PORT &= ~(1<<E)//***********E口由高变低时候 液晶模块使能

//****************************忙等待
void LCD_BUSY_WAIT()
{
	RS_0();RW_1();
  c0:	d8 98       	cbi	0x1b, 0	; 27
  c2:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DAT_DDR=0X00;
  c4:	17 ba       	out	0x17, r1	; 23
	E_1();delay_reduce(10);
  c6:	da 9a       	sbi	0x1b, 2	; 27
  c8:	6a e0       	ldi	r22, 0x0A	; 10
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 41 00 	call	0x82	; 0x82 <_Z12delay_reducel>
	while(LCD_DAT_PIN & 0x80);//***********如果最高位BF为零则不忙
  d4:	b7 99       	sbic	0x16, 7	; 22
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <_Z13LCD_BUSY_WAITv+0x14>
	E_0();
  d8:	da 98       	cbi	0x1b, 2	; 27
	LCD_DAT_DDR=0xff;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret

000000e0 <_Z17WRITE_LCD_COMMANDh>:
	
	
}
//**************************LCD 写指令
void WRITE_LCD_COMMAND(uchar cmd)
{
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
	LCD_BUSY_WAIT();
  e4:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z13LCD_BUSY_WAITv>
	RS_0();RW_0();
  e8:	d8 98       	cbi	0x1b, 0	; 27
  ea:	d9 98       	cbi	0x1b, 1	; 27
	LCD_DAT_PORT = cmd;
  ec:	c8 bb       	out	0x18, r28	; 24
	E_1();E_0();
  ee:	da 9a       	sbi	0x1b, 2	; 27
  f0:	da 98       	cbi	0x1b, 2	; 27
	
}
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <_Z14WRITE_LCD_DATAh>:
	
	
}
//************************LCD 写数据
void WRITE_LCD_DATA(uchar dat)
{
  f6:	cf 93       	push	r28
  f8:	c8 2f       	mov	r28, r24
	LCD_BUSY_WAIT();
  fa:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z13LCD_BUSY_WAITv>
	RS_1();RW_0();
  fe:	d8 9a       	sbi	0x1b, 0	; 27
 100:	d9 98       	cbi	0x1b, 1	; 27
	LCD_DAT_PORT = dat;
 102:	c8 bb       	out	0x18, r28	; 24
	E_1();E_0();
 104:	da 9a       	sbi	0x1b, 2	; 27
 106:	da 98       	cbi	0x1b, 2	; 27
	
	
	
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <_Z8LCD_initv>:
//*********************LCD 初始化
void LCD_init()
{
	
	LCD_DAT_DDR = 0XFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	87 bb       	out	0x17, r24	; 23
	LCD_CON_DDR |= (1<<RS)|(1<<RW)|(1<<E);
 110:	8a b3       	in	r24, 0x1a	; 26
 112:	87 60       	ori	r24, 0x07	; 7
 114:	8a bb       	out	0x1a, r24	; 26
	WRITE_LCD_COMMAND(0x01);delay_reduce(15);//**********清屏
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z17WRITE_LCD_COMMANDh>
 11c:	6f e0       	ldi	r22, 0x0F	; 15
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 41 00 	call	0x82	; 0x82 <_Z12delay_reducel>
	WRITE_LCD_COMMAND(0x06);delay_reduce(15);//**********显示模式 光标移动
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z17WRITE_LCD_COMMANDh>
 12e:	6f e0       	ldi	r22, 0x0F	; 15
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 41 00 	call	0x82	; 0x82 <_Z12delay_reducel>
	WRITE_LCD_COMMAND(0x0c);delay_reduce(15);//**********显示开关 无光标 不闪烁
 13a:	8c e0       	ldi	r24, 0x0C	; 12
 13c:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z17WRITE_LCD_COMMANDh>
 140:	6f e0       	ldi	r22, 0x0F	; 15
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 41 00 	call	0x82	; 0x82 <_Z12delay_reducel>
	//WRITE_LCD_COMMAND(0x1c);delay_reduce(15);//**********移动显示的文字
	WRITE_LCD_COMMAND(0x38);delay_reduce(15);//**********显示 2行显示 5*7
 14c:	88 e3       	ldi	r24, 0x38	; 56
 14e:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z17WRITE_LCD_COMMANDh>
 152:	6f e0       	ldi	r22, 0x0F	; 15
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 41 00 	call	0x82	; 0x82 <_Z12delay_reducel>
 15e:	08 95       	ret

00000160 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc>:


//*******************LCD 逐个显示

void LCD_SAMPLE_SHOW_STRING(uchar x,uchar y,char *str)
{
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	8a 01       	movw	r16, r20
		
		delay_second(15);
	
	}		*/
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
 16a:	61 11       	cpse	r22, r1
 16c:	04 c0       	rjmp	.+8      	; 0x176 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x16>
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z17WRITE_LCD_COMMANDh>
 174:	13 c0       	rjmp	.+38     	; 0x19c <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x3c>
	if(y==1)WRITE_LCD_COMMAND(0xc0|x);
 176:	61 30       	cpi	r22, 0x01	; 1
 178:	89 f4       	brne	.+34     	; 0x19c <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x3c>
 17a:	80 6c       	ori	r24, 0xC0	; 192
 17c:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z17WRITE_LCD_COMMANDh>
 180:	0d c0       	rjmp	.+26     	; 0x19c <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x3c>
	
	for(count=0;count<16 && str[count]!='\0';count++)
	{WRITE_LCD_DATA(str[count]);
 182:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z14WRITE_LCD_DATAh>
		
		delay_second(3);}
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z12delay_secondi>
	}		*/
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
	if(y==1)WRITE_LCD_COMMAND(0xc0|x);
	
	for(count=0;count<16 && str[count]!='\0';count++)
 18e:	c0 17       	cp	r28, r16
 190:	d1 07       	cpc	r29, r17
 192:	99 f0       	breq	.+38     	; 0x1ba <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x5a>
 194:	89 91       	ld	r24, Y+
 196:	81 11       	cpse	r24, r1
 198:	f4 cf       	rjmp	.-24     	; 0x182 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x22>
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x5a>
 19c:	f8 01       	movw	r30, r16
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	59 f0       	breq	.+22     	; 0x1ba <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x5a>
	{WRITE_LCD_DATA(str[count]);
 1a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z14WRITE_LCD_DATAh>
		
		delay_second(3);}
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z12delay_secondi>
 1b0:	e8 01       	movw	r28, r16
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	00 5f       	subi	r16, 0xF0	; 240
 1b6:	1f 4f       	sbci	r17, 0xFF	; 255
 1b8:	ed cf       	rjmp	.-38     	; 0x194 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x34>
	
	
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <main>:
#include <avr/io.h>
#include <D:\MEGA\EDEN\avr\system\lib_delay.h>
#include <D:\MEGA\EDEN\avr\device\lib_lcd1602_m16.h>

int main(void)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	a0 97       	sbiw	r28, 0x20	; 32
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
	LCD_init(); 
 1d8:	0e 94 86 00 	call	0x10c	; 0x10c <_Z8LCD_initv>
	
	char line1[] = {0X2E,0X2E,0X2E,0XA7,0XC5,0XC0,0X2E,0X2E,0X2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20};
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	e0 e6       	ldi	r30, 0x60	; 96
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	de 01       	movw	r26, r28
 1e4:	51 96       	adiw	r26, 0x11	; 17
 1e6:	01 90       	ld	r0, Z+
 1e8:	0d 92       	st	X+, r0
 1ea:	8a 95       	dec	r24
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x22>
	char line2[] = {0XBD,0X2E,0X2E,0X2E,0XB7,0X2E,0X2E,0X2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20};
 1ee:	80 e1       	ldi	r24, 0x10	; 16
 1f0:	e0 e7       	ldi	r30, 0x70	; 112
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	de 01       	movw	r26, r28
 1f6:	11 96       	adiw	r26, 0x01	; 1
 1f8:	01 90       	ld	r0, Z+
 1fa:	0d 92       	st	X+, r0
 1fc:	8a 95       	dec	r24
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x34>
	
    while(1)
    {
        LCD_SAMPLE_SHOW_STRING(0,0,line1);
 200:	ae 01       	movw	r20, r28
 202:	4f 5e       	subi	r20, 0xEF	; 239
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 b0 00 	call	0x160	; 0x160 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc>
		LCD_SAMPLE_SHOW_STRING(0,1,line2);
 20e:	ae 01       	movw	r20, r28
 210:	4f 5f       	subi	r20, 0xFF	; 255
 212:	5f 4f       	sbci	r21, 0xFF	; 255
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 b0 00 	call	0x160	; 0x160 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc>
    }
 21c:	f1 cf       	rjmp	.-30     	; 0x200 <main+0x3c>

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
